#extension GL_ARB_bindless_texture: require

layout(local_size_x = 64) in;

layout(location = 0, r32ui, bindless_image) uniform restrict readonly uimage3D grid;

struct Particle
{
  vec3 position;
  float density;
  vec3 velocity;
  float pressure;
};

layout(binding = 0, std430) restrict buffer particleBuf
{
  Particle particles[];
};

const ivec3 NEIGHBORHOOD_LUT[27] = {
  ivec3(-1, -1, -1), ivec3(0, -1, -1), ivec3(1, -1, -1),
  ivec3(-1, -1,  0), ivec3(0, -1,  0), ivec3(1, -1,  0),
  ivec3(-1, -1,  1), ivec3(0, -1,  1), ivec3(1, -1,  1),
  ivec3(-1,  0, -1), ivec3(0,  0, -1), ivec3(1,  0, -1),
  ivec3(-1,  0,  0), ivec3(0,  0,  0), ivec3(1,  0,  0),
  ivec3(-1,  0,  1), ivec3(0,  0,  1), ivec3(1,  0,  1),
  ivec3(-1,  1, -1), ivec3(0,  1, -1), ivec3(1,  1, -1),
  ivec3(-1,  1,  0), ivec3(0,  1,  0), ivec3(1,  1,  0),
  ivec3(-1,  1,  1), ivec3(0,  1,  1), ivec3(1,  1,  1)
};

void main()
{
  const uint particleId = gl_GlobalInvocationID.x;

  if (particleId >= PARTICLE_COUNT)
  {
    return;
  }

  Particle particle = particles[particleId];

  const ivec3 voxelId = ivec3(INV_CELL_SIZE * (particle.position - GRID_ORIGIN));

  float density = MASS * pow(KERNEL_RADIUS * KERNEL_RADIUS, 3) * DENSITY_KERNEL_WEIGHT_CONST;

  #pragma unroll 1
  for (uint i = 0; i < 27; ++i)
  {
    const ivec3 newVoxelId = voxelId + NEIGHBORHOOD_LUT[i];

    if (any(lessThan(newVoxelId, ivec3(0))) ||
        any(greaterThanEqual(newVoxelId, GRID_RES)))
    {
      continue;
    }

    const uint voxelValue = imageLoad(grid, newVoxelId).r;

    const uint voxelParticleOffset = (voxelValue >> 8);
    const uint voxelParticleCount = (voxelValue & 0xFF);

    for (uint p = 0; p < voxelParticleCount; ++p)
    {
      const uint otherParticleId = voxelParticleOffset + p;

      const vec3 otherParticlePos = particles[otherParticleId].position;

      const vec3 r = particle.position - otherParticlePos;

      const float rLen = length(r);

      if (rLen >= KERNEL_RADIUS || particleId == otherParticleId)
      {
        continue;
      }

      const float weight = pow(KERNEL_RADIUS * KERNEL_RADIUS - rLen * rLen, 3) * DENSITY_KERNEL_WEIGHT_CONST;

      density += MASS * weight;
    }
  }

  const float pressure = REST_PRESSURE + STIFFNESS_K * (density - REST_DENSITY);

  particle.density = density;

  particle.pressure = pressure;

  particles[particleId] = particle;
}
