#extension GL_ARB_bindless_texture: require

layout(local_size_x = 32) in;

struct Particle
{
  vec3 position;
  float density;
  vec3 velocity;
  float pressure;
};

layout(binding = 0, std430) restrict readonly buffer particleBuf1
{
  Particle inParticles[];
};

layout(binding = 1, std430) restrict writeonly buffer particleBuf2
{
  Particle outParticles[];
};

layout(location = 0, r32ui, bindless_image) uniform restrict uimage3D grid;

void main()
{
  const uint inParticleId = gl_GlobalInvocationID.x;

  if (inParticleId >= PARTICLE_COUNT)
  {
    return;
  }

  const Particle particle = inParticles[inParticleId];

  const ivec3 voxelCoord = ivec3(INV_CELL_SIZE * (particle.position - GRID_ORIGIN));

  const uint voxelValue = imageAtomicAdd(grid, voxelCoord, 1);

  const uint outParticleId = (voxelValue >> 8) + (voxelValue & 0xFF);

  outParticles[outParticleId] = particle;
}
