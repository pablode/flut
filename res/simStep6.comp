#extension GL_ARB_bindless_texture: require

layout (local_size_x = 64) in;

layout(location = 0, r32ui, bindless_image) uniform restrict readonly uimage3D grid;
layout(location = 1, bindless_sampler) uniform sampler3D velocity;
layout(location = 2) uniform float DT;
layout(location = 3) uniform vec3 GRAVITY;

struct Particle
{
  vec3 position;
  float density;
  vec3 velocity;
  float pressure;
};

layout(binding = 0, std430) restrict buffer particleBuf
{
  Particle particles[];
};

const ivec3 NEIGHBORHOOD_LUT[27] = {
  ivec3(-1, -1, -1), ivec3(0, -1, -1), ivec3(1, -1, -1),
  ivec3(-1, -1,  0), ivec3(0, -1,  0), ivec3(1, -1,  0),
  ivec3(-1, -1,  1), ivec3(0, -1,  1), ivec3(1, -1,  1),
  ivec3(-1,  0, -1), ivec3(0,  0, -1), ivec3(1,  0, -1),
  ivec3(-1,  0,  0), ivec3(0,  0,  0), ivec3(1,  0,  0),
  ivec3(-1,  0,  1), ivec3(0,  0,  1), ivec3(1,  0,  1),
  ivec3(-1,  1, -1), ivec3(0,  1, -1), ivec3(1,  1, -1),
  ivec3(-1,  1,  0), ivec3(0,  1,  0), ivec3(1,  1,  0),
  ivec3(-1,  1,  1), ivec3(0,  1,  1), ivec3(1,  1,  1)
};

void main()
{
  uint particleId = gl_GlobalInvocationID.x;

  if (particleId >= PARTICLE_COUNT)
  {
    return;
  }

  Particle particle = particles[particleId];

  ivec3 voxelId = ivec3(INV_CELL_SIZE * (particle.position - GRID_ORIGIN));

  vec3 forcePressure = vec3(0.0);
  vec3 forceViscosity = vec3(0.0);

  uint voxelCount = 0;
  uint voxelParticleCount = 0;
  uint voxelParticleOffset = 0;

  #pragma unroll 1
  while (voxelCount < 27 || voxelParticleCount > 0)
  {
    if (voxelParticleCount == 0)
    {
      ivec3 newVoxelId = voxelId + NEIGHBORHOOD_LUT[voxelCount];
      voxelCount++;

      if (any(lessThan(newVoxelId, ivec3(0))) || any(greaterThanEqual(newVoxelId, GRID_RES)))
      {
        continue;
      }

      uint voxelValue = imageLoad(grid, newVoxelId).r;
      voxelParticleOffset = (voxelValue >> 8);
      voxelParticleCount = (voxelValue & 0xFF);

      if (voxelParticleCount == 0)
      {
        continue;
      }
    }

    voxelParticleCount--;

    uint otherParticleId = voxelParticleOffset + voxelParticleCount;

    Particle otherParticle = particles[otherParticleId];

    vec3 r = particle.position - otherParticle.position;

    float rLen = length(r);

    if (rLen >= KERNEL_RADIUS)
    {
      continue;
    }

    vec3 weightPressure = vec3(0.0);

    if (rLen > 0.0)
    {
      weightPressure = PRESS_KERNEL_WEIGHT_CONST * pow(KERNEL_RADIUS - rLen, 3) * (r / rLen);
    }

    float pressure = particle.pressure + otherParticle.pressure;

    forcePressure += (MASS * pressure * weightPressure) / (2.0 * otherParticle.density);

    float weightVis = VIS_KERNEL_WEIGHT_CONST * (KERNEL_RADIUS - rLen);

    vec3 filteredVelocity = texture(velocity, (otherParticle.position - GRID_ORIGIN) / GRID_SIZE).xyz;

    vec3 velocityDiff = filteredVelocity - particle.velocity;

    forceViscosity += (MASS * velocityDiff * weightVis) / otherParticle.density;
  }

  vec3 forceGravity = GRAVITY * particle.density;

  vec3 force = (forceViscosity * VIS_COEFF) - forcePressure + forceGravity;

  vec3 acceleration = force / particle.density;

  particles[particleId].velocity += acceleration * DT;
}
