#extension GL_ARB_bindless_texture: require

layout(local_size_x = 32) in;

struct Particle
{
  vec3 position;
  float density;
  vec3 velocity;
  float pressure;
};

layout(binding = 0, std430) restrict buffer particleBuf1
{
  Particle particles[];
};

layout(location = 0, r32ui, bindless_image) uniform restrict uimage3D grid;
layout(location = 1) uniform float dt;

const float SAFE_BOUNDS = 0.5;

void main()
{
  uint particleId = gl_GlobalInvocationID.x;

  Particle particle = particles[particleId];

  vec3 newVelo = particle.velocity;
  vec3 newPos = particle.position + newVelo * dt;

  float wallDamping = 0.5;
  vec3 boundsL = GRID_ORIGIN + SAFE_BOUNDS;
  vec3 boundsH = GRID_ORIGIN + GRID_SIZE - SAFE_BOUNDS;

  if (newPos.x < boundsL.x) { newVelo.x *= -wallDamping; newPos.x = boundsL.x; }
  if (newPos.x > boundsH.x) { newVelo.x *= -wallDamping; newPos.x = boundsH.x; }
  if (newPos.y < boundsL.y) { newVelo.y *= -wallDamping; newPos.y = boundsL.y; }
  if (newPos.y > boundsH.y) { newVelo.y *= -wallDamping; newPos.y = boundsH.y; }
  if (newPos.z < boundsL.z) { newVelo.z *= -wallDamping; newPos.z = boundsL.z; }
  if (newPos.z > boundsH.z) { newVelo.z *= -wallDamping; newPos.z = boundsH.z; }

  particle.velocity = newVelo;
  particle.position = newPos;

  particles[particleId] = particle;

  ivec3 voxelCoord = ivec3(INV_CELL_SIZE * (newPos - GRID_ORIGIN));

  imageAtomicAdd(grid, voxelCoord, 1);
}
